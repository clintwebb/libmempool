.\" man page for libmempool
.\" Contact dev@hyper-active.com.au to correct errors or omissions. 
.TH mempool_get 3 "29 May 2009" "1.02" "Library for handling a pool of various sized memory pointers."
.SH NAME
mempool_get \- Get a pointer to a chunk of memory from the pool.
.SH SYNOPSIS
#include <mempool.h>
.sp
.B void * mempool_get(mempool_t *pool, unsigned int amount)
.br
.SH DESCRIPTION
.B mempool_get()
will return a pointer to a chunk of allocated memory that is at least the size that was indicated (but may be larger, but no method is given to determine its actual size).
.sp
Under normal mode, when mempool_get() is called, but there is no more memory pointers available (or of suitable size), it would return a NULL.   It would be assumed that the memory would be allocated, initialized somehow, and added to the mempool with mempool_assign().   This gives control over the initialisation of new objects.  Also, you can pre-fill a pool with a certain number of objects, and if they are used, dont allocate more.
.sp
When autoexpand is enabled, it means that when a mempool_get() is called, it will use malloc to allocate the amount of memory requested and automatically add it to the pool.  See 
.BR mempool_autoexpand (3)
for some things to be careful of when using autoexpand.
.SH EXAMPLES
#include <mempool.h>
.sp
int main(void) {
.br
	mempool_t *msgpool;
.br
	char *message;
.sp
	msgpool = (mempool_t *) malloc(sizeof(mempool_t));
.br
	mempool_init(msgpool);
.sp
	/* the pool is currently empty, so we need to put at least one in there, for it to be useful */
.br
	message = (char *) malloc(1024);
.br
	mempool_assign(msgpool, message, 1024);
.sp
	while (get_message(message, 1024)) {
.sp
		/* pass control of message to this function... which will return 
.br
		   it to the message pool when it is finished with it. */
.br
		process_message(message, msgpool);
.sp		
		/* get another message from the buffer */
.br
		message = 
.B mempool_get
(msgpool, 1024);
.br
		if (message == NULL) {
.br
			message = (char *) malloc(1024);
.br
			mempool_assign(msgpool, message, 1024);
.br
		}
.br
	}
.sp	
	/* before exiting, we should be sure that all the outstanding messages have been processed... */
.sp
	mempool_free(msgpool);
.br
	free(msgpool);
.br
	msgpool = NULL;
.br
	return(0);
.br
}
.SH SEE ALSO
.BR libmempool (3),
.BR mempool_return (3),
.BR mempool_assign (3)
.SH BUGS
No known bugs at this time. 
.SH AUTHOR
.nf
Clint Webb (webb.clint@gmail.com)
on behalf of Hyper-Active Systems, Australia.
.br
http://www.hyper-active.com.au/libmempool/
.fi
.SH HISTORY
May 29, 2009 \- v1.02, Manpage created.
