.\" man page for libmempool
.\" Contact dev@hyper-active.com.au to correct errors or omissions. 
.TH mempool_release 3 "29 May 2009" "1.02" "Library for handling a pool of various sized memory pointers."
.SH NAME
mempool_release \- Remove a chunk of memory from the pool.
.SH SYNOPSIS
#include <mempool.h>
.sp
.B void mempool_release(mempool_t *pool, void *ptr)
.br
.SH DESCRIPTION
.B mempool_release()
is used to remove memory from the pool.  This can be done when de-initializing the pool, or situations where the memory returned from the pool needs to be managed somewhere else.
.SH EXAMPLES
#include <mempool.h>
.sp
void process_message(char *msg, mempool_t *msgpool) {
.br
	/* do something with the data */
.br
	if (finished) {
.br
		mempool_return(msgpool, msg);
.br
 	}
.br
	else {
.br
.B 		mempool_release
(msgpool, msg);
.br
		/* pass control of this peice of memory somewhere else */
.br
 	}
.br
}
.sp
int main(void) {
.br
	mempool_t *msgpool;
.br
	char *message;
.sp
	msgpool = (mempool_t *) malloc(sizeof(mempool_t));
.br
	mempool_init(msgpool);
.sp
	/* the pool is currently empty, so we need to put at least one in there, for it to be useful */
.br
	message = (char *) malloc(1024);
.br
	mempool_assign(msgpool, message, 1024);
.sp
	while (get_message(message, 1024)) {
.sp
		/* pass control of message to this function... which will return 
.br
		   it to the message pool when it is finished with it. */
.br
		process_message(message, msgpool);
.sp		
		/* get another message from the buffer */
.br
		message = mempool_get(msgpool, 1024);
.br
		if (message == NULL) {
.br
			message = (char *) malloc(1024);
.br
			mempool_assign(msgpool, message, 1024);
.br
		}
.br
	}
.sp	
	/* before exiting, we should be sure that all the outstanding messages have been processed... */
.br
	while ((msg = mempool_get(msgpool))) {
.br
		/* do some cleanup with the memory */
.br
.B 		mempool_release
(msgpool, msg);
.br
		free(msg);
.br
	}
.sp
	mempool_free(msgpool);
.br
	free(msgpool);
.br
	msgpool = NULL;
.br
	return(0);
.br
}
.SH SEE ALSO
.BR libmempool (3),
.BR mempool_get (3),
.BR mempool_return (3),
.BR mempool_assign (3)
.SH BUGS
No known bugs at this time. 
.SH AUTHOR
.nf
Clint Webb (webb.clint@gmail.com)
on behalf of Hyper-Active Systems, Australia.
.br
http://www.hyper-active.com.au/libmempool/
.fi
.SH HISTORY
May 29, 2009 \- v1.02, Manpage created.
